% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/connect.R
\name{glaredb_connect}
\alias{glaredb_connect}
\alias{RGlareDbConnection}
\title{Connect to a GlareDB database}
\usage{
glaredb_connect(
  data_dir_or_cloud_url = NULL,
  ...,
  spill_path = NULL,
  disable_tls = FALSE,
  cloud_addr = "https://console.glaredb.com",
  location = NULL,
  storage_options = NULL,
  env = parent.frame()
)
}
\arguments{
\item{data_dir_or_cloud_url}{A character of path to a local GlareDB database or
a cloud URL or \code{NULL}. If \code{NULL}, a in-memory database is used.}

\item{...}{Ignored.}

\item{spill_path}{TODO}

\item{disable_tls}{\code{TRUE} or \code{FALSE} to indicating whether to disable TLS.}

\item{cloud_addr}{A character of a GlareDB cloud URL.}

\item{location}{TODO}

\item{storage_options}{Named character vector of storage options or \code{NULL} (default).}

\item{env}{The connected environment, an \link[=environment-class]{environment class} or \code{NULL}
(means the \link[=.GlobalEnv]{global env}).
GlareDB can resister some class of R objects inside the environment automatically,
so you can access the objects inside this environment by the object name in the query.
The default, the caller environment is used.}
}
\value{
GlareDB connection object
}
\description{
Connect to a GlareDB database
}
\examples{
# Create a connection of in-memory database
con <- glaredb_connect()

# The print result shows the connected environment
con

# The connected environment can be accessed by `$.env`
con$.env

# Create a table to the database and insert data
glaredb_execute("CREATE TABLE my_table (a int)", con)
glaredb_execute("INSERT INTO my_table VALUES (1), (2)", con)

# Query the data and assign the result to a variable
res <- glaredb_sql("SELECT * FROM my_table", con)

# Since the result `res` exists in the connected environment,
# it can be resolved by the object name in the query
exists("res", envir = con$.env)

glaredb_sql("SELECT * FROM res", con) |>
  as_glaredb_table()
}
