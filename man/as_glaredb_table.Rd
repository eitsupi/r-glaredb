% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/table.R
\name{as_glaredb_table}
\alias{as_glaredb_table}
\alias{RGlareDbTable}
\alias{as_glaredb_table.default}
\alias{as_glaredb_table.nanoarrow_array_stream}
\alias{as_glaredb_table.RGlareDbExecutionOutput}
\title{Create a GlareDB table}
\usage{
as_glaredb_table(x, ...)

\method{as_glaredb_table}{default}(x, ..., schema = NULL)

\method{as_glaredb_table}{nanoarrow_array_stream}(x, ...)

\method{as_glaredb_table}{RGlareDbExecutionOutput}(x, ...)
}
\arguments{
\item{x}{An object to be coerced to a GlareDB table.}

\item{...}{Additional arguments passed to methods.}

\item{schema}{An optional schema used to enforce conversion to a particular
type. Defaults to \code{\link[nanoarrow:infer_nanoarrow_schema]{infer_nanoarrow_schema()}}.}
}
\value{
A \link[=RGlareDbTable]{GlareDB table}.
}
\description{
GlareDB table is a class that has a struct similar to \link[arrow:Table-class]{arrow::Table} innerly and
can be converted from/to other classes via \code{\link[nanoarrow:as_nanoarrow_array_stream]{nanoarrow::as_nanoarrow_array_stream()}}.
}
\details{
The default method of \code{\link[=as_glaredb_table]{as_glaredb_table()}} calls \code{\link[nanoarrow:as_nanoarrow_array_stream]{nanoarrow::as_nanoarrow_array_stream()}}
internally, and all arguments are passed to it.
}
\examples{
con <- glaredb_connect()

# Create a GlareDB table from a data frame with a specified schema
dat <- data.frame(a = 1:3, b = letters[1:3]) |>
  as_glaredb_table(
    schema = nanoarrow::na_struct(
      list(
        a = nanoarrow::na_int64(),
        b = nanoarrow::na_large_string()
      )
    )
  )

# Run an SQL query against the connection,
# and convert the result to a GlareDB table
glaredb_sql("SELECT * FROM dat", con) |>
  as_glaredb_table()

# Convert the GlareDB table to an R data frame
dat |>
  as.data.frame()

# Convert the GlareDB table to an arrow Table
if (requireNamespace("arrow", quietly = TRUE)) {
  dat |>
    arrow::as_arrow_table()
}

# Convert the GlareDB table to a polars DataFrame
if (requireNamespace("polars", quietly = TRUE)) {
  dat |>
    polars::as_polars_df()
}
}
