TARGET = x86_64-pc-windows-gnu

# catch DEBUG envvar, which is passed from pkgbuild::compile_dll()
PROFILE = $(subst x,release,$(subst truex,dev,$(DEBUG)x))

LIBNAME = libr_glaredb.a
TARGET_DIR = $(CURDIR)/rust/target
LIBDIR = $(TARGET_DIR)/$(TARGET)/$(subst dev,debug,$(PROFILE))
STATLIB = $(LIBDIR)/$(LIBNAME)
PKG_LIBS = -L$(LIBDIR) -lr_glaredb -lws2_32 -ladvapi32 -luserenv -lbcrypt -lntdll

CARGO_BUILD_ARGS = --lib \
	--profile="$(PROFILE)" \
	--manifest-path="$(CURDIR)/rust/Cargo.toml" \
	--target-dir="$(TARGET_DIR)" \
	--target="$(TARGET)"

# Rtools doesn't have the linker in the location that cargo expects, so we need
# to overwrite it via configuration.
CARGO_LINKER = x86_64-w64-mingw32.static.posix-gcc.exe

all: C_clean

$(SHLIB): $(STATLIB)

$(STATLIB):
	# When the GNU toolchain is used (i.e. on CRAN), -lgcc_eh is specified for
	# building proc-macro2, but Rtools doesn't contain libgcc_eh. This isn't used
	# in actual, but we need this tweak to please the compiler.
	mkdir -p $(LIBDIR)/libgcc_mock && touch $(LIBDIR)/libgcc_mock/libgcc_eh.a

	if [ -f "$(CURDIR)/../tools/$(LIBNAME)" ]; then \
		mkdir -p "$(LIBDIR)" ; \
		mv "$(CURDIR)/../tools/$(LIBNAME)" "$(STATLIB)" ; \
		exit 0; \
	fi && \
	export CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER="$(CARGO_LINKER)" && \
	  export LIBRARY_PATH="$${LIBRARY_PATH};$(LIBDIR)/libgcc_mock" && \
	  cargo build $(CARGO_BUILD_ARGS)

C_clean:
	rm -Rf $(SHLIB) $(STATLIB) $(OBJECTS)

clean:
	rm -Rf $(SHLIB) $(STATLIB) $(OBJECTS) rust/target
